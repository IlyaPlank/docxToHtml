{"id":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","dependencies":[{"name":"D:\\Work\\Other\\Testing\\docxToHtml\\package.json","includedInParent":true,"mtime":1599153242175},{"name":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\pako\\package.json","includedInParent":true,"mtime":1599153239058}],"generated":{"js":"'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"node_modules/mammoth/node_modules/pako/lib/zlib/adler32.js":"'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n"},"lineCount":33}},"error":null,"hash":"cdf4c963c147c0964606e59fd79ae796","cacheData":{"env":{}}}