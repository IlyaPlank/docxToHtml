{"id":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","dependencies":[{"name":"D:\\Work\\Other\\Testing\\docxToHtml\\package.json","includedInParent":true,"mtime":1599153242175},{"name":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\package.json","includedInParent":true,"mtime":1599153235394},{"name":"./Token","loc":{"line":1,"column":20},"parent":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\regex-tokeniser.js","resolved":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\Token.js"},{"name":"./StringSource","loc":{"line":2,"column":27},"parent":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\regex-tokeniser.js","resolved":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\StringSource.js"}],"generated":{"js":"var Token = require(\"./Token\");\nvar StringSource = require(\"./StringSource\");\n\nexports.RegexTokeniser = RegexTokeniser;\n\nfunction RegexTokeniser(rules) {\n    rules = rules.map(function(rule) {\n        return {\n            name: rule.name,\n            regex: new RegExp(rule.regex.source, \"g\")\n        };\n    });\n    \n    function tokenise(input, description) {\n        var source = new StringSource(input, description);\n        var index = 0;\n        var tokens = [];\n    \n        while (index < input.length) {\n            var result = readNextToken(input, index, source);\n            index = result.endIndex;\n            tokens.push(result.token);\n        }\n        \n        tokens.push(endToken(input, source));\n        return tokens;\n    }\n\n    function readNextToken(string, startIndex, source) {\n        for (var i = 0; i < rules.length; i++) {\n            var regex = rules[i].regex;\n            regex.lastIndex = startIndex;\n            var result = regex.exec(string);\n            \n            if (result) {\n                var endIndex = startIndex + result[0].length;\n                if (result.index === startIndex && endIndex > startIndex) {\n                    var value = result[1];\n                    var token = new Token(\n                        rules[i].name,\n                        value,\n                        source.range(startIndex, endIndex)\n                    );\n                    return {token: token, endIndex: endIndex};\n                }\n            }\n        }\n        var endIndex = startIndex + 1;\n        var token = new Token(\n            \"unrecognisedCharacter\",\n            string.substring(startIndex, endIndex),\n            source.range(startIndex, endIndex)\n        );\n        return {token: token, endIndex: endIndex};\n    }\n    \n    function endToken(input, source) {\n        return new Token(\n            \"end\",\n            null,\n            source.range(input.length, input.length)\n        );\n    }\n    \n    return {\n        tokenise: tokenise\n    }\n}\n\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}}],"sources":{"node_modules/mammoth/node_modules/lop/lib/regex-tokeniser.js":"var Token = require(\"./Token\");\nvar StringSource = require(\"./StringSource\");\n\nexports.RegexTokeniser = RegexTokeniser;\n\nfunction RegexTokeniser(rules) {\n    rules = rules.map(function(rule) {\n        return {\n            name: rule.name,\n            regex: new RegExp(rule.regex.source, \"g\")\n        };\n    });\n    \n    function tokenise(input, description) {\n        var source = new StringSource(input, description);\n        var index = 0;\n        var tokens = [];\n    \n        while (index < input.length) {\n            var result = readNextToken(input, index, source);\n            index = result.endIndex;\n            tokens.push(result.token);\n        }\n        \n        tokens.push(endToken(input, source));\n        return tokens;\n    }\n\n    function readNextToken(string, startIndex, source) {\n        for (var i = 0; i < rules.length; i++) {\n            var regex = rules[i].regex;\n            regex.lastIndex = startIndex;\n            var result = regex.exec(string);\n            \n            if (result) {\n                var endIndex = startIndex + result[0].length;\n                if (result.index === startIndex && endIndex > startIndex) {\n                    var value = result[1];\n                    var token = new Token(\n                        rules[i].name,\n                        value,\n                        source.range(startIndex, endIndex)\n                    );\n                    return {token: token, endIndex: endIndex};\n                }\n            }\n        }\n        var endIndex = startIndex + 1;\n        var token = new Token(\n            \"unrecognisedCharacter\",\n            string.substring(startIndex, endIndex),\n            source.range(startIndex, endIndex)\n        );\n        return {token: token, endIndex: endIndex};\n    }\n    \n    function endToken(input, source) {\n        return new Token(\n            \"end\",\n            null,\n            source.range(input.length, input.length)\n        );\n    }\n    \n    return {\n        tokenise: tokenise\n    }\n}\n\n\n"},"lineCount":71}},"error":null,"hash":"1518f45589be7a17c78a9392f3842315","cacheData":{"env":{}}}