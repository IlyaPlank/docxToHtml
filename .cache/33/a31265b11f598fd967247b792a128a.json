{"id":"node_modules/mammoth/node_modules/lop/lib/rules.js","dependencies":[{"name":"D:\\Work\\Other\\Testing\\docxToHtml\\package.json","includedInParent":true,"mtime":1599153242175},{"name":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\package.json","includedInParent":true,"mtime":1599153235394},{"name":"underscore","loc":{"line":1,"column":16},"parent":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\rules.js","resolved":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\node_modules\\underscore\\underscore.js"},{"name":"option","loc":{"line":2,"column":22},"parent":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\rules.js","resolved":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\option\\index.js"},{"name":"./parsing-results","loc":{"line":3,"column":22},"parent":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\rules.js","resolved":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\parsing-results.js"},{"name":"./errors","loc":{"line":4,"column":21},"parent":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\rules.js","resolved":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\errors.js"},{"name":"./lazy-iterators","loc":{"line":5,"column":28},"parent":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\rules.js","resolved":"D:\\Work\\Other\\Testing\\docxToHtml\\node_modules\\mammoth\\node_modules\\lop\\lib\\lazy-iterators.js"}],"generated":{"js":"var _ = require(\"underscore\");\nvar options = require(\"option\");\nvar results = require(\"./parsing-results\");\nvar errors = require(\"./errors\");\nvar lazyIterators = require(\"./lazy-iterators\");\n\nexports.token = function(tokenType, value) {\n    var matchValue = value !== undefined;\n    return function(input) {\n        var token = input.head();\n        if (token && token.name === tokenType && (!matchValue || token.value === value)) {\n            return results.success(token.value, input.tail(), token.source);\n        } else {\n            var expected = describeToken({name: tokenType, value: value});\n            return describeTokenMismatch(input, expected);\n        }\n    };\n};\n\nexports.tokenOfType = function(tokenType) {\n    return exports.token(tokenType);\n};\n\nexports.firstOf = function(name, parsers) {\n    if (!_.isArray(parsers)) {\n        parsers = Array.prototype.slice.call(arguments, 1);\n    }\n    return function(input) {\n        return lazyIterators\n            .fromArray(parsers)\n            .map(function(parser) {\n                return parser(input);\n            })\n            .filter(function(result) {\n                return result.isSuccess() || result.isError();\n            })\n            .first() || describeTokenMismatch(input, name);\n    };\n};\n\nexports.then = function(parser, func) {\n    return function(input) {\n        var result = parser(input);\n        if (!result.map) {\n            console.log(result);\n        }\n        return result.map(func);\n    };\n};\n\nexports.sequence = function() {\n    var parsers = Array.prototype.slice.call(arguments, 0);\n    var rule = function(input) {\n        var result = _.foldl(parsers, function(memo, parser) {\n            var result = memo.result;\n            var hasCut = memo.hasCut;\n            if (!result.isSuccess()) {\n                return {result: result, hasCut: hasCut};\n            }\n            var subResult = parser(result.remaining());\n            if (subResult.isCut()) {\n                return {result: result, hasCut: true};\n            } else if (subResult.isSuccess()) {\n                var values;\n                if (parser.isCaptured) {\n                    values = result.value().withValue(parser, subResult.value());\n                } else {\n                    values = result.value();\n                }\n                var remaining = subResult.remaining();\n                var source = input.to(remaining);\n                return {\n                    result: results.success(values, remaining, source),\n                    hasCut: hasCut\n                };\n            } else if (hasCut) {\n                return {result: results.error(subResult.errors(), subResult.remaining()), hasCut: hasCut};\n            } else {\n                return {result: subResult, hasCut: hasCut};\n            }\n        }, {result: results.success(new SequenceValues(), input), hasCut: false}).result;\n        var source = input.to(result.remaining());\n        return result.map(function(values) {\n            return values.withValue(exports.sequence.source, source);\n        });\n    };\n    rule.head = function() {\n        var firstCapture = _.find(parsers, isCapturedRule);\n        return exports.then(\n            rule,\n            exports.sequence.extract(firstCapture)\n        );\n    };\n    rule.map = function(func) {\n        return exports.then(\n            rule,\n            function(result) {\n                return func.apply(this, result.toArray());\n            }\n        );\n    };\n    \n    function isCapturedRule(subRule) {\n        return subRule.isCaptured;\n    }\n    \n    return rule;\n};\n\nvar SequenceValues = function(values, valuesArray) {\n    this._values = values || {};\n    this._valuesArray = valuesArray || [];\n};\n\nSequenceValues.prototype.withValue = function(rule, value) {\n    if (rule.captureName && rule.captureName in this._values) {\n        throw new Error(\"Cannot add second value for capture \\\"\" + rule.captureName + \"\\\"\");\n    } else {\n        var newValues = _.clone(this._values);\n        newValues[rule.captureName] = value;\n        var newValuesArray = this._valuesArray.concat([value]);\n        return new SequenceValues(newValues, newValuesArray);\n    }\n};\n\nSequenceValues.prototype.get = function(rule) {\n    if (rule.captureName in this._values) {\n        return this._values[rule.captureName];\n    } else {\n        throw new Error(\"No value for capture \\\"\" + rule.captureName + \"\\\"\");\n    }\n};\n\nSequenceValues.prototype.toArray = function() {\n    return this._valuesArray;\n};\n\nexports.sequence.capture = function(rule, name) {\n    var captureRule = function() {\n        return rule.apply(this, arguments);\n    };\n    captureRule.captureName = name;\n    captureRule.isCaptured = true;\n    return captureRule;\n};\n\nexports.sequence.extract = function(rule) {\n    return function(result) {\n        return result.get(rule);\n    };\n};\n\nexports.sequence.applyValues = function(func) {\n    // TODO: check captureName doesn't conflict with source or other captures\n    var rules = Array.prototype.slice.call(arguments, 1);\n    return function(result) {\n        var values = rules.map(function(rule) {\n            return result.get(rule);\n        });\n        return func.apply(this, values);\n    };\n};\n\nexports.sequence.source = {\n    captureName: \"☃source☃\"\n};\n\nexports.sequence.cut = function() {\n    return function(input) {\n        return results.cut(input);\n    };\n};\n\nexports.optional = function(rule) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            return result.map(options.some);\n        } else if (result.isFailure()) {\n            return results.success(options.none, input);\n        } else {\n            return result;\n        }\n    };\n};\n\nexports.zeroOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, false);\n};\n\nexports.oneOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, true);\n};\n\nvar zeroOrMore = exports.zeroOrMore = function(rule) {\n    return function(input) {\n        var values = [];\n        var result;\n        while ((result = rule(input)) && result.isSuccess()) {\n            input = result.remaining();\n            values.push(result.value());\n        }\n        if (result.isError()) {\n            return result;\n        } else {\n            return results.success(values, input);\n        }\n    };\n};\n\nexports.oneOrMore = function(rule) {\n    return exports.oneOrMoreWithSeparator(rule, noOpRule);\n};\n\nfunction noOpRule(input) {\n    return results.success(null, input);\n}\n\nvar repeatedWithSeparator = function(rule, separator, isOneOrMore) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            var mainRule = exports.sequence.capture(rule, \"main\");\n            var remainingRule = zeroOrMore(exports.then(\n                exports.sequence(separator, mainRule),\n                exports.sequence.extract(mainRule)\n            ));\n            var remainingResult = remainingRule(result.remaining());\n            return results.success([result.value()].concat(remainingResult.value()), remainingResult.remaining());\n        } else if (isOneOrMore || result.isError()) {\n            return result;\n        } else {\n            return results.success([], input);\n        }\n    };\n};\n\nexports.leftAssociative = function(leftRule, rightRule, func) {\n    var rights;\n    if (func) {\n        rights = [{func: func, rule: rightRule}];\n    } else {\n        rights = rightRule;\n    }\n    rights = rights.map(function(right) {\n        return exports.then(right.rule, function(rightValue) {\n            return function(leftValue, source) {\n                return right.func(leftValue, rightValue, source);\n            };\n        });\n    });\n    var repeatedRule = exports.firstOf.apply(null, [\"rules\"].concat(rights));\n    \n    return function(input) {\n        var start = input;\n        var leftResult = leftRule(input);\n        if (!leftResult.isSuccess()) {\n            return leftResult;\n        }\n        var repeatedResult = repeatedRule(leftResult.remaining());\n        while (repeatedResult.isSuccess()) {\n            var remaining = repeatedResult.remaining();\n            var source = start.to(repeatedResult.remaining());\n            var right = repeatedResult.value();\n            leftResult = results.success(\n                right(leftResult.value(), source),\n                remaining,\n                source\n            );\n            repeatedResult = repeatedRule(leftResult.remaining());\n        }\n        if (repeatedResult.isError()) {\n            return repeatedResult;\n        }\n        return leftResult;\n    };\n};\n\nexports.leftAssociative.firstOf = function() {\n    return Array.prototype.slice.call(arguments, 0);\n};\n\nexports.nonConsuming = function(rule) {\n    return function(input) {\n        return rule(input).changeRemaining(input);\n    };\n};\n\nvar describeToken = function(token) {\n    if (token.value) {\n        return token.name + \" \\\"\" + token.value + \"\\\"\";\n    } else {\n        return token.name;\n    }\n};\n\nfunction describeTokenMismatch(input, expected) {\n    var error;\n    var token = input.head();\n    if (token) {\n        error = errors.error({\n            expected: expected,\n            actual: describeToken(token),\n            location: token.source\n        });\n    } else {\n        error = errors.error({\n            expected: expected,\n            actual: \"end of tokens\"\n        });\n    }\n    return results.failure([error], input);\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/mammoth/node_modules/lop/lib/rules.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}}],"sources":{"node_modules/mammoth/node_modules/lop/lib/rules.js":"var _ = require(\"underscore\");\nvar options = require(\"option\");\nvar results = require(\"./parsing-results\");\nvar errors = require(\"./errors\");\nvar lazyIterators = require(\"./lazy-iterators\");\n\nexports.token = function(tokenType, value) {\n    var matchValue = value !== undefined;\n    return function(input) {\n        var token = input.head();\n        if (token && token.name === tokenType && (!matchValue || token.value === value)) {\n            return results.success(token.value, input.tail(), token.source);\n        } else {\n            var expected = describeToken({name: tokenType, value: value});\n            return describeTokenMismatch(input, expected);\n        }\n    };\n};\n\nexports.tokenOfType = function(tokenType) {\n    return exports.token(tokenType);\n};\n\nexports.firstOf = function(name, parsers) {\n    if (!_.isArray(parsers)) {\n        parsers = Array.prototype.slice.call(arguments, 1);\n    }\n    return function(input) {\n        return lazyIterators\n            .fromArray(parsers)\n            .map(function(parser) {\n                return parser(input);\n            })\n            .filter(function(result) {\n                return result.isSuccess() || result.isError();\n            })\n            .first() || describeTokenMismatch(input, name);\n    };\n};\n\nexports.then = function(parser, func) {\n    return function(input) {\n        var result = parser(input);\n        if (!result.map) {\n            console.log(result);\n        }\n        return result.map(func);\n    };\n};\n\nexports.sequence = function() {\n    var parsers = Array.prototype.slice.call(arguments, 0);\n    var rule = function(input) {\n        var result = _.foldl(parsers, function(memo, parser) {\n            var result = memo.result;\n            var hasCut = memo.hasCut;\n            if (!result.isSuccess()) {\n                return {result: result, hasCut: hasCut};\n            }\n            var subResult = parser(result.remaining());\n            if (subResult.isCut()) {\n                return {result: result, hasCut: true};\n            } else if (subResult.isSuccess()) {\n                var values;\n                if (parser.isCaptured) {\n                    values = result.value().withValue(parser, subResult.value());\n                } else {\n                    values = result.value();\n                }\n                var remaining = subResult.remaining();\n                var source = input.to(remaining);\n                return {\n                    result: results.success(values, remaining, source),\n                    hasCut: hasCut\n                };\n            } else if (hasCut) {\n                return {result: results.error(subResult.errors(), subResult.remaining()), hasCut: hasCut};\n            } else {\n                return {result: subResult, hasCut: hasCut};\n            }\n        }, {result: results.success(new SequenceValues(), input), hasCut: false}).result;\n        var source = input.to(result.remaining());\n        return result.map(function(values) {\n            return values.withValue(exports.sequence.source, source);\n        });\n    };\n    rule.head = function() {\n        var firstCapture = _.find(parsers, isCapturedRule);\n        return exports.then(\n            rule,\n            exports.sequence.extract(firstCapture)\n        );\n    };\n    rule.map = function(func) {\n        return exports.then(\n            rule,\n            function(result) {\n                return func.apply(this, result.toArray());\n            }\n        );\n    };\n    \n    function isCapturedRule(subRule) {\n        return subRule.isCaptured;\n    }\n    \n    return rule;\n};\n\nvar SequenceValues = function(values, valuesArray) {\n    this._values = values || {};\n    this._valuesArray = valuesArray || [];\n};\n\nSequenceValues.prototype.withValue = function(rule, value) {\n    if (rule.captureName && rule.captureName in this._values) {\n        throw new Error(\"Cannot add second value for capture \\\"\" + rule.captureName + \"\\\"\");\n    } else {\n        var newValues = _.clone(this._values);\n        newValues[rule.captureName] = value;\n        var newValuesArray = this._valuesArray.concat([value]);\n        return new SequenceValues(newValues, newValuesArray);\n    }\n};\n\nSequenceValues.prototype.get = function(rule) {\n    if (rule.captureName in this._values) {\n        return this._values[rule.captureName];\n    } else {\n        throw new Error(\"No value for capture \\\"\" + rule.captureName + \"\\\"\");\n    }\n};\n\nSequenceValues.prototype.toArray = function() {\n    return this._valuesArray;\n};\n\nexports.sequence.capture = function(rule, name) {\n    var captureRule = function() {\n        return rule.apply(this, arguments);\n    };\n    captureRule.captureName = name;\n    captureRule.isCaptured = true;\n    return captureRule;\n};\n\nexports.sequence.extract = function(rule) {\n    return function(result) {\n        return result.get(rule);\n    };\n};\n\nexports.sequence.applyValues = function(func) {\n    // TODO: check captureName doesn't conflict with source or other captures\n    var rules = Array.prototype.slice.call(arguments, 1);\n    return function(result) {\n        var values = rules.map(function(rule) {\n            return result.get(rule);\n        });\n        return func.apply(this, values);\n    };\n};\n\nexports.sequence.source = {\n    captureName: \"☃source☃\"\n};\n\nexports.sequence.cut = function() {\n    return function(input) {\n        return results.cut(input);\n    };\n};\n\nexports.optional = function(rule) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            return result.map(options.some);\n        } else if (result.isFailure()) {\n            return results.success(options.none, input);\n        } else {\n            return result;\n        }\n    };\n};\n\nexports.zeroOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, false);\n};\n\nexports.oneOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, true);\n};\n\nvar zeroOrMore = exports.zeroOrMore = function(rule) {\n    return function(input) {\n        var values = [];\n        var result;\n        while ((result = rule(input)) && result.isSuccess()) {\n            input = result.remaining();\n            values.push(result.value());\n        }\n        if (result.isError()) {\n            return result;\n        } else {\n            return results.success(values, input);\n        }\n    };\n};\n\nexports.oneOrMore = function(rule) {\n    return exports.oneOrMoreWithSeparator(rule, noOpRule);\n};\n\nfunction noOpRule(input) {\n    return results.success(null, input);\n}\n\nvar repeatedWithSeparator = function(rule, separator, isOneOrMore) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            var mainRule = exports.sequence.capture(rule, \"main\");\n            var remainingRule = zeroOrMore(exports.then(\n                exports.sequence(separator, mainRule),\n                exports.sequence.extract(mainRule)\n            ));\n            var remainingResult = remainingRule(result.remaining());\n            return results.success([result.value()].concat(remainingResult.value()), remainingResult.remaining());\n        } else if (isOneOrMore || result.isError()) {\n            return result;\n        } else {\n            return results.success([], input);\n        }\n    };\n};\n\nexports.leftAssociative = function(leftRule, rightRule, func) {\n    var rights;\n    if (func) {\n        rights = [{func: func, rule: rightRule}];\n    } else {\n        rights = rightRule;\n    }\n    rights = rights.map(function(right) {\n        return exports.then(right.rule, function(rightValue) {\n            return function(leftValue, source) {\n                return right.func(leftValue, rightValue, source);\n            };\n        });\n    });\n    var repeatedRule = exports.firstOf.apply(null, [\"rules\"].concat(rights));\n    \n    return function(input) {\n        var start = input;\n        var leftResult = leftRule(input);\n        if (!leftResult.isSuccess()) {\n            return leftResult;\n        }\n        var repeatedResult = repeatedRule(leftResult.remaining());\n        while (repeatedResult.isSuccess()) {\n            var remaining = repeatedResult.remaining();\n            var source = start.to(repeatedResult.remaining());\n            var right = repeatedResult.value();\n            leftResult = results.success(\n                right(leftResult.value(), source),\n                remaining,\n                source\n            );\n            repeatedResult = repeatedRule(leftResult.remaining());\n        }\n        if (repeatedResult.isError()) {\n            return repeatedResult;\n        }\n        return leftResult;\n    };\n};\n\nexports.leftAssociative.firstOf = function() {\n    return Array.prototype.slice.call(arguments, 0);\n};\n\nexports.nonConsuming = function(rule) {\n    return function(input) {\n        return rule(input).changeRemaining(input);\n    };\n};\n\nvar describeToken = function(token) {\n    if (token.value) {\n        return token.name + \" \\\"\" + token.value + \"\\\"\";\n    } else {\n        return token.name;\n    }\n};\n\nfunction describeTokenMismatch(input, expected) {\n    var error;\n    var token = input.head();\n    if (token) {\n        error = errors.error({\n            expected: expected,\n            actual: describeToken(token),\n            location: token.source\n        });\n    } else {\n        error = errors.error({\n            expected: expected,\n            actual: \"end of tokens\"\n        });\n    }\n    return results.failure([error], input);\n}\n"},"lineCount":314}},"error":null,"hash":"4dfa7c7bf0cee2b805eaeb3cc4205f84","cacheData":{"env":{}}}